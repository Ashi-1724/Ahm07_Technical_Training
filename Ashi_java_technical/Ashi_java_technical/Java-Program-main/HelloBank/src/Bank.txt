public class Bank {
    private static int totalAccounts = 0;

    public static int getTotalAccounts() {
        return totalAccounts;
    }

    public static void incrementTotalAccounts() {
        totalAccounts++;
    }
}

// Abstract Account class with common functionality
abstract class Account {
    protected double balance;

    public Account(double initialBalance) {
        this.balance = initialBalance;
        Bank.incrementTotalAccounts();
    }

    public abstract void deposit(double amount);

    public abstract void withdraw(double amount);

    public double getBalance() {
        return balance;
    }

    protected void setBalance(double balance) {
        this.balance = balance;
    }
}

// SavingsAccount class inheriting from Account
class SavingsAccount extends Account {
    private static final double INTEREST_RATE = 0.03;
    private static final double DEPOSIT_LIMIT = 10000;

    public SavingsAccount(double initialBalance) {
        super(initialBalance);
    }

    @Override
    public void deposit(double amount) {
        if (amount <= DEPOSIT_LIMIT) {
            setBalance(getBalance() + amount);
            setBalance(getBalance() + getBalance() * INTEREST_RATE);
        } else {
            System.out.println("Deposit limit exceeded");
        }
    }

    @Override
    public void withdraw(double amount) {
        if (getBalance() >= amount) {
            setBalance(getBalance() - amount);
        } else {
            System.out.println("Insufficient funds");
        }
    }
}

// CheckingAccount class inheriting from Account
class CheckingAccount extends Account {
    private static final double OVERDRAFT_LIMIT = 100;
    private static final double WITHDRAW_LIMIT = 5000;
    private static final double MINIMUM_BALANCE = 100;

    public CheckingAccount(double initialBalance) {
        super(initialBalance);
    }

    @Override
    public void deposit(double amount) {
        setBalance(getBalance() + amount);
    }

    @Override
    public void withdraw(double amount) {
        if (getBalance() + OVERDRAFT_LIMIT >= amount && amount <= WITHDRAW_LIMIT) {
            setBalance(getBalance() - amount);
            if (getBalance() < MINIMUM_BALANCE) {
                setBalance(getBalance() - 10); // Deduct fee for going below minimum balance
            }
        } else if (amount > WITHDRAW_LIMIT) {
            System.out.println("Withdraw limit exceeded");
        } else {
            System.out.println("Overdraft limit exceeded");
        }
    }
}

// Transaction class with final methods and variables
class Transaction {
    private final double transactionFee;

    public Transaction(double fee) {
        this.transactionFee = fee;
    }

    public final void performTransaction(Account account, double amount, boolean isDeposit) {
        if (isDeposit) {
            account.deposit(amount);
        } else {
            account.withdraw(amount);
        }
        applyTransactionFee(account);
    }

    private void applyTransactionFee(Account account) {
        account.withdraw(transactionFee);
    }
}